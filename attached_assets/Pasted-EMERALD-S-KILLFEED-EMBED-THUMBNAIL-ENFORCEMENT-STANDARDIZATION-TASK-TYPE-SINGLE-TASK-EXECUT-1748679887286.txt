EMERALD’S KILLFEED — EMBED THUMBNAIL ENFORCEMENT & STANDARDIZATION

🧩 TASK TYPE: SINGLE-TASK EXECUTION — NO PARTIALS, NO CHECKPOINTING
All subtasks listed below must be executed in a single uninterrupted batch.


---

# [PHASE 0] — PROJECT INITIALIZATION (ZIP)

1. Unzip the .zip archive found in attached_assets using the unzip package


2. Flatten the extracted contents into the project root directory

Eliminate any nested folders (e.g. /project/bot/, /project/project/)



3. Clean up:

Remove broken links, symbolic pointers, or duplicate cogs and modules



4. Log the structure:

Entry point of the bot (main file)

Location of all cog files

EmbedFactory or equivalent embed construction modules

Asset folder location (e.g., /assets/) containing image/logo files



5. Load environment variables from Replit secrets:

BOT_TOKEN

MONGO_URI



6. Start the bot via Replit's run button

Ensure all cogs load and bot connects to Discord

Do not proceed if the bot fails to initialize fully





---

# [PHASE 1] — THUMBNAIL IMAGE APPLICATION & VERIFICATION

🎯 OBJECTIVE

Ensure that all embeds across the codebase use a valid, relevant thumbnail image drawn from the project's /assets folder — without assuming any specific filenames.


---

✅ ACTIONS REQUIRED

🔍 Audit all cogs and modules that create or send Discord embeds

Includes killfeed, stats, leaderboards, log events, economy, bounties, gambling, help, etc.


🧠 If an embed is missing a thumbnail:

Inspect the context of the embed (e.g., "killfeed", "bounty placed", "faction joined")

Select a relevant image from the /assets folder using intelligent name matching and usage patterns


🔄 If an embed has a broken or hardcoded thumbnail path:

Replace with correct path using the /assets image pool


🧱 Where EmbedFactory or embed builders are used:

Update or correct logic to dynamically apply thumbnails based on embed context

Centralize thumbnail selection logic where possible to reduce future duplication


♻️ For pooled or batched embeds (e.g., killfeed summaries):

Ensure a single appropriate thumbnail is shown per embed — no duplication


🚫 Avoid emoji usage in embed bodies or titles

🔍 Search all pooled and streamed embed systems to ensure no instance is overlooked



---

✅ COMPLETION CRITERIA

[ ] All embeds produced by the bot include a properly applied thumbnail

[ ] Thumbnail images are drawn from /assets intelligently and appropriately

[ ] No broken, missing, or duplicate .set_thumbnail() logic

[ ] Pooled embeds are styled consistently with one thumbnail each

[ ] EmbedFactory (or equivalent) correctly handles image logic

[ ] All changes are visually confirmed through runtime testing

[ ] No unrelated formatting, logic, or features are changed



---

🧷 EXECUTION RULES

✅ Treat all actions as one atomic task
✅ No partial outputs, no reports, no checkpointing, no commits until all phases complete
✅ Strictly enforce styling via EmbedFactory or embed builder if defined
✅ Do not assume any specific image names — choose from /assets dynamically
✅ No emoji use is allowed in embeds (beyond gambling commands if applicable)
✅ Use Pycord 2.6.1 only — no discord.py syntax allowed
✅ Preserve all pooled message structures exactly as they are
✅ Confirm embed output with working examples in production